generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("MIGRATE_DATABASE_URL")
}

model Member {
    id          String          @id @default(uuid())
    name        String
    about       String?
    photoUrl    String?
    type        String?
    isActive    Boolean         @default(true)
    contactInfo MemberContact[]
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @default(now()) @updatedAt
}

model MemberContact {
    id        String   @id @default(uuid())
    name      String
    snsId     String
    memberId  String
    member    Member   @relation(fields: [memberId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model News {
    id            String   @id @default(uuid())
    title         String
    body          String
    category      String?
    backgroundUrl String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt
}

model Project {
    id        String           @id @default(uuid())
    title     String
    about     String?
    logoUrl   String?
    editions  ProjectEdition[]
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
}

model ProjectAttendance {
    id            String             @id @default(uuid())
    participantId String
    participant   ProjectParticipant @relation(fields: [participantId], references: [id])
    eventId       String?
    event         ProjectEvent?      @relation(fields: [eventId], references: [id])
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
}

model ProjectCertificate {
    id            String              @id @default(uuid())
    participantId String?
    participant   ProjectParticipant? @relation(fields: [participantId], references: [id])
    speakerId     String?
    speaker       ProjectSpeaker?     @relation(fields: [speakerId], references: [id])
    editionId     String?
    edition       ProjectEdition?     @relation(fields: [editionId], references: [id])
    eventId       String?
    event         ProjectEvent?       @relation(fields: [eventId], references: [id])
    attendance    Float?
    createdAt     DateTime            @default(now())
    updatedAt     DateTime            @updatedAt
}

enum ProjectCertificateKind {
    minicurso
    palestra
}

model ProjectCertificateTemplate {
    id            String                  @id @default(uuid())
    text          String
    backgroundUrl String
    editionId     String?
    edition       ProjectEdition?         @relation(fields: [editionId], references: [id])
    eventId       String?
    event         ProjectEvent?           @relation(fields: [eventId], references: [id])
    kind          ProjectCertificateKind?
    createdAt     DateTime                @default(now())
    updatedAt     DateTime                @updatedAt

    @@unique([editionId, eventId, kind])
}

model ProjectEdition {
    id                  String                       @id @default(uuid())
    name                String?
    number              Float
    date                DateTime
    logoUrl             String?
    minimumAttendance   Int                          @default(100)
    certificateTemplate ProjectCertificateTemplate[]
    certificates        ProjectCertificate[]
    events              ProjectEvent[]
    participants        ProjectParticipation[]
    projectId           String
    project             Project                      @relation(fields: [projectId], references: [id])
    createdAt           DateTime                     @default(now())
    updatedAt           DateTime                     @updatedAt
}

model ProjectEvent {
    id                  String                       @id @default(uuid())
    name                String
    about               String?
    type                String?
    capacity            Int?
    extraCapacity       Int                          @default(0)
    onSite              Boolean                      @default(true)
    externalSignup      String?
    location            String?
    startTime           DateTime
    endTime             DateTime
    allowMultiple       Boolean                      @default(false)
    certificateTemplate ProjectCertificateTemplate[]
    certificates        ProjectCertificate[]
    speakerId           String
    speaker             ProjectSpeaker               @relation(fields: [speakerId], references: [id])
    participants        ProjectParticipation[]
    attendees           ProjectAttendance[]
    editionId           String
    edition             ProjectEdition               @relation(fields: [editionId], references: [id])
    createdAt           DateTime                     @default(now())
    updatedAt           DateTime                     @updatedAt
}

model ProjectParticipation {
    id            String             @id @default(uuid())
    editionId     String?
    edition       ProjectEdition?    @relation(fields: [editionId], references: [id])
    eventId       String?
    event         ProjectEvent?      @relation(fields: [eventId], references: [id])
    participantId String
    participant   ProjectParticipant @relation(fields: [participantId], references: [id])
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt

    @@unique([participantId, editionId])
    @@unique([participantId, eventId])
}

model ProjectParticipant {
    id                   String                 @id @default(uuid())
    name                 String
    email                String                 @unique
    birthDate            DateTime
    phoneNumber          String                 @unique
    // It'll bug if it's an 'Int' and 'BigInt' is messy to work with
    matricula            String?                @unique
    course               String
    university           String
    certificates         ProjectCertificate[]
    projectsParticipated ProjectParticipation[]
    attendances          ProjectAttendance[]
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
}

model ProjectSpeaker {
    id           String               @id @default(uuid())
    name         String
    about        String?
    photoUrl     String
    events       ProjectEvent[]
    certificates ProjectCertificate[]
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
}
